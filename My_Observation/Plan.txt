
Пиши быстрее, но на том же уровне качества.

_______________
Порядок: 
1. Сначала структуру сделать.
1.1 Мб, создать Unit Test(хотя лучше без него).
1.4.6 Добавить проверку contains() in Enum list.
1.4.5 Добавить проверку в set() для enum в Person; 
1.4.2 Л/// TO DO: ДОбавить: 1. статические поля; 2. Как статическое поле сделать ограничение количества последних мест работы.
1.4.3 Добавить в set проверку на тип obj, мол если ты клиент, то тебе нельзя поставить один из ТиповРаботника.
1.4.1 Enum: Добавить к "EnumMangar'aм" GetEnumFromString(string stingValue)?
1.3; Сделать метод получение Клиентов/Работников в зависимости от филтра. Или, чтобы через  Enum был поиск.
1.2; Сделать редиректинг с index.html на Home/..
1.3; Реалищовать функицонал для имплиминтирующихся клас.
2.0 Настроить static fields. ?????????????????

3. ГУИ.
++++++++++++++++____________++++++++++++++++++:
TO DO: 

________________________
Next git commit message:


______________________________________
Примечание:
0.4 Дошло только сейчас. А Person ведь многоаспектный Obj.
0. При добавлении нового obj в БД, сохраняется ли двунаправленность?
0.1 Истинная ли двунаправленность и ровны ли эти obj?

1. В базе данных только зранение - никакой логики.
2. Написаная мною комментарии к методу должны быть короткие в одну строку ( лучше всего). Примем:  toString() - возвращает описание объекта.
As additional:
1. Create Not-Found web-page.
________________
Понять:
2. Не будут ли мешать ограничения на Get{} работе моделе? Мб, ошибки будут.
1.0; Может реализовать следующим образом? public virtual DbSet<Employee> Employees { get { People.ToList().Where(e => e.RelationShipWithCompany = "Employee") } set; } /// TO DO Also add string into Enum or josn-parameters/
1. Если со стороны кода написать DBSet<Starzysta>, но не маппировать его на  БД, то можно ли им пользоваьтся как ползуемся другими DbSet'ami? 
1.1; Можно ли использовать свой дискриминатор с другим названием? 
_____________
Понято:
0. А как сделать автоаматическое доккументирование? Или мне ещё комментарии нужно будет писать? || Писать только там где оч. нужно.
0.2. Ассоциации должны быть двунаправленные!!!  || ORM создает двунаправленность.
0.1 Вот как Я вччера дигаграммы создавал разные для разных моделей, вот так и в коде следует сделать. Отдельно для БД реализация и отдельно для С# || ORM всё делает.
__________
ИНТЕРЕСНЕНЬКОЕ:
1. Создал view для клиента. Смаппировал БД в C# -> Создал obj "Client". Круто! Но, к сожалению, в Базе данных только хранение данных и никакой логики. 
___________
Current task:
3. Добавить Enum в Person.
3.1 Создать полноценную структуру: наследования,  overlapping.
3.2. Добавить интерфейс. Или вместо него, реализовывать метод (для Уборщик-Рецепшионист), который будет проверять, кем являеется Obj -> соответствующий метод.
________________
Completed tasks:
1. Add Auto-generation library anad set up it. + 
1.2. Похоже, что нужно будет изменить структуру в C# коде, так как она не соответсвует тому что должно быть написано. Значит, забивая ( почти) на БД и думаю, как эта часть должна быть рпеализована/сммапирована с UML to C#. 
1.3. Сделать overlapping для Client и Employee. Это означает о конце, проверочной имплиминтации и выбора вектора. Помни, главное, чтобы работало, а остальное - то всё хуйня.
2. Create overlapping Client and Employee
1.4 Настроить Enum.
2.0 Создать AddLanguage(Employee, LanguageAttributes) в Service и использовать в Person.
2.1 Проверить яаляется ли Person -> Employee.
2.2 Не будет ли после добваления к нему приписано языков больше чем три. 
2.1 Сммапировать ещё раз.
___________________________---
Не реализоывно, но возможно понадобится:
1. Проверка, перед сменой ставки... Сделал, но хз, насклько хорошо сделал.
2. Смена типа опыта с Apprentice на Experienced, после работы в отеле определенное количесвто времени. !сДЕЛАл 
4. Пройтись по всем Get/set и создать для них соответствующие ограничения ( прямо как в примере ).
3. wyliczenie stawkę za godzine pracy() <- Чтобы зависило от количества/качества свойств. 
